{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Theia \u00b6 \"Titaness of (...) the shining light of the clear blue sky\" from Wikipedia retrieved 1 November 2018. Theia is used to control the environment of model (train) layouts based on real-world data and simulation models. Current development is focused around lighting \ud83c\udf04 but we plan to expand the functionalities to include sound \ud83d\udd09 and actuator control. \ud83c\udf31 Origin \u00b6 This project was started in order to control lighting of model-train layouts in more interesting ways. Most solutions only offer manual and rule based control resulting in very predictive behavior. Theia breaks with this by controlling the model environment based on real-word data and simulation models that introduce an element of randomness. \u2611\ufe0f Principles \u00b6 Science based environment simulation; Simple to start but complex if you want to; Modern user interface; Support for common hardware; \u2728 Features \u00b6 Currently Theia is in early development so the list of available features is a bit short. However we have a lot planned: Accelerated model time \u23f0 Day and night cycle \ud83c\udf13 Hardware control over MQTT Household lighting \ud83c\udfe1 Weather patterns \u26c5\ufe0f\u2614\u26a1\ufe0f Traffic \ud83d\ude97\ud83d\ude95\ud83d\ude8c Opening-hours \ud83d\udd57 Graphical user interface Moon and stars \ud83c\udf1c\u2728 DCC train control \ud83d\ude82 Weather sounds \ud83d\udd09","title":"Home"},{"location":"#theia","text":"\"Titaness of (...) the shining light of the clear blue sky\" from Wikipedia retrieved 1 November 2018. Theia is used to control the environment of model (train) layouts based on real-world data and simulation models. Current development is focused around lighting \ud83c\udf04 but we plan to expand the functionalities to include sound \ud83d\udd09 and actuator control.","title":"Theia"},{"location":"#origin","text":"This project was started in order to control lighting of model-train layouts in more interesting ways. Most solutions only offer manual and rule based control resulting in very predictive behavior. Theia breaks with this by controlling the model environment based on real-word data and simulation models that introduce an element of randomness.","title":"\ud83c\udf31 Origin"},{"location":"#principles","text":"Science based environment simulation; Simple to start but complex if you want to; Modern user interface; Support for common hardware;","title":"\u2611\ufe0f Principles"},{"location":"#features","text":"Currently Theia is in early development so the list of available features is a bit short. However we have a lot planned: Accelerated model time \u23f0 Day and night cycle \ud83c\udf13 Hardware control over MQTT Household lighting \ud83c\udfe1 Weather patterns \u26c5\ufe0f\u2614\u26a1\ufe0f Traffic \ud83d\ude97\ud83d\ude95\ud83d\ude8c Opening-hours \ud83d\udd57 Graphical user interface Moon and stars \ud83c\udf1c\u2728 DCC train control \ud83d\ude82 Weather sounds \ud83d\udd09","title":"\u2728 Features"},{"location":"contributing/","text":"\u2764 Contributing \u00b6 Found a bug? Have a good idea for improving Theia? Head over to Theia's Github page and create and submit a new issues/feature request. Want to contribute your code? Go to the contributing code section and submit a pull-request. Feature request or bug report \u00b6 Found a bug or have a feature request go to our issue-tracker and report it using the appropriate template. Writing documentation \u00b6 Want to contribute to our documentation? Your a real hero! \ud83c\udf89 Our documentation is all written in Markdown and build by MkDocs To add pages to our documentation place your new markdown file in \\docs and add the page in the nav section of .mkdocs.yml . Have you added any images, place these in \\docs\\images . To preview the changes navigate to the root of the repository and run: mkdocs serve Warning If the website does not load immediately you should refresh the webpage once the the site has been build end the local server is running. Contributing code \u00b6 Want to contribute your coding skills? Head over tot our issue-tracker and look for an issue/feature you like to work on. All-ready have your code written? No need to file an issue first immediately create an pull-request. Pull-request process \u00b6 Once you create a pull-request your code code will be checked by our CI system. To find out which checks are being run head over to the testing page. If all the checks pass one of the core-contributers will accept you pull-request and merge it with the master branch to be deployed. Code style \u00b6 The code style we use is \"Black\" , but don't worry about that to much as long as you have the provided pre-commit hooks installed there is nothing for you to do. Black takes over the minutiae of hand-formatting. One thing Black cannot solve is your variable naming. Please keep these according to PEP-8 . Commit messages \u00b6 Inspired by Gitmoji we like all our commit messages to be preceded by an emoji. Using emoji on commit messages provides an easy way of identifying the purpose or intention of a commit with only looking at the emoji used. Refer to the table underneath to see which emoji is appropriate for your commit. Emoji Commit type Code Initial commit :tada: New feature :sparkles: Adding a test :white_check_mark: Writing documentation :memo: Documenting source code :bulb: Bad code :hankey: Experimental stuff :alembic: Work in progress :construction: Updating UI or style files :lipstick: Refactoring code :recycle: Improve format/structure :art: Performance improvement :zap: Removing linter warnings :rotating_light: Bugfix :beetle: Fixed security issue :lock: Fixing on Linux :penguin: Fixing on MacOS :apple: Fixing on Windows :checkered_flag: Moving files/code :truck: Removing code/files :wastebasket: Adding a dependency :heavy_plus_sign: Removing a dependency :heavy_minus_sign: Upgrading dependencies :arrow_up: Downgrading dependencies :arrow_down: Configuration files :wrench: Metadata :card_index: Releasing or version tags :bookmark: Deploying stuff :rocket: Merging branches :twisted_rightwards_arrows: Reverting changes :rewind:","title":"Contributing"},{"location":"contributing/#contributing","text":"Found a bug? Have a good idea for improving Theia? Head over to Theia's Github page and create and submit a new issues/feature request. Want to contribute your code? Go to the contributing code section and submit a pull-request.","title":"\u2764 Contributing"},{"location":"contributing/#feature-request-or-bug-report","text":"Found a bug or have a feature request go to our issue-tracker and report it using the appropriate template.","title":"Feature request or bug report"},{"location":"contributing/#writing-documentation","text":"Want to contribute to our documentation? Your a real hero! \ud83c\udf89 Our documentation is all written in Markdown and build by MkDocs To add pages to our documentation place your new markdown file in \\docs and add the page in the nav section of .mkdocs.yml . Have you added any images, place these in \\docs\\images . To preview the changes navigate to the root of the repository and run: mkdocs serve Warning If the website does not load immediately you should refresh the webpage once the the site has been build end the local server is running.","title":"Writing documentation"},{"location":"contributing/#contributing-code","text":"Want to contribute your coding skills? Head over tot our issue-tracker and look for an issue/feature you like to work on. All-ready have your code written? No need to file an issue first immediately create an pull-request.","title":"Contributing code"},{"location":"contributing/#pull-request-process","text":"Once you create a pull-request your code code will be checked by our CI system. To find out which checks are being run head over to the testing page. If all the checks pass one of the core-contributers will accept you pull-request and merge it with the master branch to be deployed.","title":"Pull-request process"},{"location":"contributing/#code-style","text":"The code style we use is \"Black\" , but don't worry about that to much as long as you have the provided pre-commit hooks installed there is nothing for you to do. Black takes over the minutiae of hand-formatting. One thing Black cannot solve is your variable naming. Please keep these according to PEP-8 .","title":"Code style"},{"location":"contributing/#commit-messages","text":"Inspired by Gitmoji we like all our commit messages to be preceded by an emoji. Using emoji on commit messages provides an easy way of identifying the purpose or intention of a commit with only looking at the emoji used. Refer to the table underneath to see which emoji is appropriate for your commit. Emoji Commit type Code Initial commit :tada: New feature :sparkles: Adding a test :white_check_mark: Writing documentation :memo: Documenting source code :bulb: Bad code :hankey: Experimental stuff :alembic: Work in progress :construction: Updating UI or style files :lipstick: Refactoring code :recycle: Improve format/structure :art: Performance improvement :zap: Removing linter warnings :rotating_light: Bugfix :beetle: Fixed security issue :lock: Fixing on Linux :penguin: Fixing on MacOS :apple: Fixing on Windows :checkered_flag: Moving files/code :truck: Removing code/files :wastebasket: Adding a dependency :heavy_plus_sign: Removing a dependency :heavy_minus_sign: Upgrading dependencies :arrow_up: Downgrading dependencies :arrow_down: Configuration files :wrench: Metadata :card_index: Releasing or version tags :bookmark: Deploying stuff :rocket: Merging branches :twisted_rightwards_arrows: Reverting changes :rewind:","title":"Commit messages"},{"location":"getting_started/","text":"\ud83e\udd14 Getting started \u00b6 Currently Theia is in early development so it has not much use for an end-user but if you would like to try it out anyway follow the instructions below. Installation \u00b6 Before installing check you have a supported platform and python version. If you don't submit an issue on Github requesting support. Supported platforms \u00b6 Theia aims to make the program available on most platforms, check the table below if your version is supported. Python 3.6 Python 3.7 Windows x86 Windows x64 Linux OSX Basic installation \u00b6 For the basic installation we assume you have git installed. If you don't do that first. To start clone the repository to your local machine: git clone https://github.com/mikevansighem/theia.git Next install the requirements: pip install -r requirements.txt Failure One of the dependencies namely PyEphem, does not provide binaries for Windows Resulting in a failure while installing requirements.txt . To fix this go to LFD and download a binary for your platform. Install it using pip install ephem\u20113.7.6.1-<YOUR_VERSION>.whl . After which you should rerun pip install -r requirements.txt Optionally the developer requirements: pip install -r requirements-dev.txt pip install -r requirements-docs.txt Make \u00b6 Trough out the documentation we make use of Make to run various commands. If you would like to install it head over to the GNU Make website . Launching Theia \u00b6 To launch Theia navigate to the root of the repository and run: python -m theia If everything went well you should be ready to start controlling your using Theia model-layout.","title":"Getting started"},{"location":"getting_started/#getting-started","text":"Currently Theia is in early development so it has not much use for an end-user but if you would like to try it out anyway follow the instructions below.","title":"\ud83e\udd14 Getting started"},{"location":"getting_started/#installation","text":"Before installing check you have a supported platform and python version. If you don't submit an issue on Github requesting support.","title":"Installation"},{"location":"getting_started/#supported-platforms","text":"Theia aims to make the program available on most platforms, check the table below if your version is supported. Python 3.6 Python 3.7 Windows x86 Windows x64 Linux OSX","title":"Supported platforms"},{"location":"getting_started/#basic-installation","text":"For the basic installation we assume you have git installed. If you don't do that first. To start clone the repository to your local machine: git clone https://github.com/mikevansighem/theia.git Next install the requirements: pip install -r requirements.txt Failure One of the dependencies namely PyEphem, does not provide binaries for Windows Resulting in a failure while installing requirements.txt . To fix this go to LFD and download a binary for your platform. Install it using pip install ephem\u20113.7.6.1-<YOUR_VERSION>.whl . After which you should rerun pip install -r requirements.txt Optionally the developer requirements: pip install -r requirements-dev.txt pip install -r requirements-docs.txt","title":"Basic installation"},{"location":"getting_started/#make","text":"Trough out the documentation we make use of Make to run various commands. If you would like to install it head over to the GNU Make website .","title":"Make"},{"location":"getting_started/#launching-theia","text":"To launch Theia navigate to the root of the repository and run: python -m theia If everything went well you should be ready to start controlling your using Theia model-layout.","title":"Launching Theia"},{"location":"not_available/","text":"Sorry, this page is not available yet \ud83d\ude4a \u00b6","title":"MQTT-module"},{"location":"not_available/#sorry-this-page-is-not-available-yet","text":"","title":"Sorry, this page is not available yet \ud83d\ude4a"},{"location":"testing_and_ci/","text":"\ud83d\udea8 Testing and CI \u00b6 Code testing \u00b6 All our code tests are located in /tests and implemented using pytest . To run the use: make check-code Formating checks \u00b6 In addition to tests for functionality of the code we have checks for the formatting of the code. For this we use Flake8 extended with flake8-docstrings and pep8-naming . To run the formatting checks use: make check-format Pre-commit hooks \u00b6 In order to ease the development of functioning and nicely formatted code we use pre-commit hooks managed by pre-commit . To get setup with our recommended pre-commit hooks navigate to the root of this repository and run: make precommit-install This takes care of the setup of all the pre-commit hooks defined in .pre-commit-config.yaml . Upon your next commit your code will be formatted, and checked for linting errors. Warning If the commit fails due to one of the formatting tools you can simply retry the commit. Most likely your commit will pass now. If a formatter needs to make a change the pre-commit checks are always considered to be failed even if the formatting has been fixed now. Continuous integration \u00b6 To ease the load on our developers we have set up an extensive continuous integration (CI) system. It takes care of building, testing and deployment of code and the documentation. To enable multi-platform testing we had to use both Travis-CI and AppVeyor To see which service is used to perform what tasks refer to the table below. Travis-CI AppVeyor Testing on Windows Testing on Linux Testing on OSX Coverage for Codacy Building documentation Deploying documentation Note Testing on OSX using Travis-CI is planned. To help improve the quality of our code further it is analyzed by Codacy which displays linting, security, formatting and coverage results in a easy to use interface.","title":"Testing and CI"},{"location":"testing_and_ci/#testing-and-ci","text":"","title":"\ud83d\udea8 Testing and CI"},{"location":"testing_and_ci/#code-testing","text":"All our code tests are located in /tests and implemented using pytest . To run the use: make check-code","title":"Code testing"},{"location":"testing_and_ci/#formating-checks","text":"In addition to tests for functionality of the code we have checks for the formatting of the code. For this we use Flake8 extended with flake8-docstrings and pep8-naming . To run the formatting checks use: make check-format","title":"Formating checks"},{"location":"testing_and_ci/#pre-commit-hooks","text":"In order to ease the development of functioning and nicely formatted code we use pre-commit hooks managed by pre-commit . To get setup with our recommended pre-commit hooks navigate to the root of this repository and run: make precommit-install This takes care of the setup of all the pre-commit hooks defined in .pre-commit-config.yaml . Upon your next commit your code will be formatted, and checked for linting errors. Warning If the commit fails due to one of the formatting tools you can simply retry the commit. Most likely your commit will pass now. If a formatter needs to make a change the pre-commit checks are always considered to be failed even if the formatting has been fixed now.","title":"Pre-commit hooks"},{"location":"testing_and_ci/#continuous-integration","text":"To ease the load on our developers we have set up an extensive continuous integration (CI) system. It takes care of building, testing and deployment of code and the documentation. To enable multi-platform testing we had to use both Travis-CI and AppVeyor To see which service is used to perform what tasks refer to the table below. Travis-CI AppVeyor Testing on Windows Testing on Linux Testing on OSX Coverage for Codacy Building documentation Deploying documentation Note Testing on OSX using Travis-CI is planned. To help improve the quality of our code further it is analyzed by Codacy which displays linting, security, formatting and coverage results in a easy to use interface.","title":"Continuous integration"}]}