{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Thea \u00b6 \"Titaness of (...) the shining light of the clear blue sky\" from Wikipedia retrieved 1 November 2018. Thea is used to control the environment of model (train) layouts based on real-world data and simulation models. Current development is focused around lighting \ud83c\udf04 but we plan to expand the functionalities to include sound \ud83d\udd09 and actuator control. \ud83c\udf31 Origin \u00b6 This project was started in order to control lighting of model-train layouts in more interesting ways. Most solutions only offer manual and rule based control resulting in very predictive behavior. Thea breaks with this by controlling the model environment based on real-word data and simulation models that introduce an element of randomness. \u2611\ufe0f Principles \u00b6 Science based environment simulation; Simple to start but complex if you want to; Modern user interface; Support for common hardware; \u2728 Features \u00b6 Currently Thea is in early development so the list of available features is a bit short. However we have a lot planned. Have a look underneath for the most exciting ones, for the full list head over to the planned features section of our documentation. Accelerated model time \u23f0 Day and night cycle \ud83c\udf13 Hardware control over MQTT Household lighting \ud83c\udfe1 Weather patterns \u26c5\ufe0f\u2614\u26a1\ufe0f Traffic \ud83d\ude97\ud83d\ude95\ud83d\ude8c Opening-hours \ud83d\udd57 Graphical user interface Moon and stars \ud83c\udf1c\u2728 DCC train control \ud83d\ude82 Weather sounds \ud83d\udd09","title":"Welcome"},{"location":"#thea","text":"\"Titaness of (...) the shining light of the clear blue sky\" from Wikipedia retrieved 1 November 2018. Thea is used to control the environment of model (train) layouts based on real-world data and simulation models. Current development is focused around lighting \ud83c\udf04 but we plan to expand the functionalities to include sound \ud83d\udd09 and actuator control.","title":"Thea"},{"location":"#origin","text":"This project was started in order to control lighting of model-train layouts in more interesting ways. Most solutions only offer manual and rule based control resulting in very predictive behavior. Thea breaks with this by controlling the model environment based on real-word data and simulation models that introduce an element of randomness.","title":"\ud83c\udf31 Origin"},{"location":"#principles","text":"Science based environment simulation; Simple to start but complex if you want to; Modern user interface; Support for common hardware;","title":"\u2611\ufe0f Principles"},{"location":"#features","text":"Currently Thea is in early development so the list of available features is a bit short. However we have a lot planned. Have a look underneath for the most exciting ones, for the full list head over to the planned features section of our documentation. Accelerated model time \u23f0 Day and night cycle \ud83c\udf13 Hardware control over MQTT Household lighting \ud83c\udfe1 Weather patterns \u26c5\ufe0f\u2614\u26a1\ufe0f Traffic \ud83d\ude97\ud83d\ude95\ud83d\ude8c Opening-hours \ud83d\udd57 Graphical user interface Moon and stars \ud83c\udf1c\u2728 DCC train control \ud83d\ude82 Weather sounds \ud83d\udd09","title":"\u2728 Features"},{"location":"CHANGELOG/","text":"\ud83d\udcdc Changelog \u00b6 All notable changes to Thea will be documented in this file which is based on Keep a Changelog For all Thea releases we adhere to Semantic versioning . Unreleased \u00b6 This is the most up-to-date version available on the master branch To see what we have planned for the next release head over to the planned features section in our documentation. Added \u00b6 This changelog \ud83d\ude09; A list of planed features; A release guide; Dependency checks using safety CI; Bug checking using flake8-bugbear Changed \u00b6 Developer documentation; Fixed \u00b6 Travis-CI not publishing to PyPi; PyPi readme rendering; Third party log messages in Thea logs; Exceptions and warnings from the warnings module not in logs; 0.0.1 - 2018-11-08 \u00b6 Initial release mostly pushed out to claim our name on PyPi. Most of the features in this release are merely functioning and not ready for use in any meaningful way. Added \u00b6 Time accelerated environment; Solar position calculation; \"Thing\" creation; Saving and loading of \"Thea worlds\";","title":"Changelog"},{"location":"CHANGELOG/#changelog","text":"All notable changes to Thea will be documented in this file which is based on Keep a Changelog For all Thea releases we adhere to Semantic versioning .","title":"\ud83d\udcdc Changelog"},{"location":"CHANGELOG/#unreleased","text":"This is the most up-to-date version available on the master branch To see what we have planned for the next release head over to the planned features section in our documentation.","title":"Unreleased"},{"location":"CHANGELOG/#added","text":"This changelog \ud83d\ude09; A list of planed features; A release guide; Dependency checks using safety CI; Bug checking using flake8-bugbear","title":"Added"},{"location":"CHANGELOG/#changed","text":"Developer documentation;","title":"Changed"},{"location":"CHANGELOG/#fixed","text":"Travis-CI not publishing to PyPi; PyPi readme rendering; Third party log messages in Thea logs; Exceptions and warnings from the warnings module not in logs;","title":"Fixed"},{"location":"CHANGELOG/#001-2018-11-08","text":"Initial release mostly pushed out to claim our name on PyPi. Most of the features in this release are merely functioning and not ready for use in any meaningful way.","title":"0.0.1 - 2018-11-08"},{"location":"CHANGELOG/#added_1","text":"Time accelerated environment; Solar position calculation; \"Thing\" creation; Saving and loading of \"Thea worlds\";","title":"Added"},{"location":"CONTRIBUTING/","text":"\u2764 Contributing \u00b6 Found a bug? Have a good idea for improving Thea? Head over to Thea's Github page and create and submit a new issue/enhancement request. Want to contribute your code? Go to the contributing code section and submit a pull-request. Feature request or bug report \u00b6 Found a bug or have a enhancement request go to our issue-tracker and report it using the appropriate template. Writing documentation \u00b6 Want to contribute to our documentation? Your a real hero! \ud83c\udf89 Our documentation is all written in Markdown and build by MkDocs To add pages to our documentation place your new markdown file in \\docs and add the page in the nav section of .mkdocs.yml . Have you added any images, place these in \\docs\\images . To preview the changes navigate to the root of the repository and run: mkdocs serve Warning If the website does not load immediately you should refresh the web-page once the the site has been build end the local server is running. Contributing code \u00b6 Want to contribute your coding skills? have a look at our guide on contributing to Theia. If you are not sure what to work on have a look at our issue-tracker and look for an issue/enhancement you like to work on. All-ready have your code written? No need to file an issue first immediately create an pull-request. Emoji! \u00b6 As you might have noticed when going over our documentation we like emoji, especially in our commit messages. Inspired by Gitmoji we like all our commit messages to be preceded by an emoji. Using emoji on commit messages provides an easy way of identifying the purpose or intention of a commit with only looking at the emoji used. Refer to the table underneath to see which emoji is appropriate for your commit. Emoji Commit type Code Initial commit :tada: New feature :sparkles: Adding a test :white_check_mark: Writing documentation :memo: Documenting source code :bulb: Bad code :hankey: Experimental stuff :alembic: Work in progress :construction: Updating UI or style files :lipstick: Refactoring code :recycle: Improve format/structure :art: Performance improvement :zap: Removing linter warnings :rotating_light: Bugfix :beetle: Fixed security issue :lock: Fixing on Linux :penguin: Fixing on MacOS :apple: Fixing on Windows :checkered_flag: Moving files/code :truck: Removing code/files :wastebasket: Adding a dependency :heavy_plus_sign: Removing a dependency :heavy_minus_sign: Upgrading dependencies :arrow_up: Downgrading dependencies :arrow_down: Configuration files :wrench: Metadata :card_index: Releasing or version tags :bookmark: Continuous integration stuff :construction_worker: Packaging stuff :package: Deploying stuff :rocket: Merging branches :twisted_rightwards_arrows: Reverting changes :rewind:","title":"Contributing"},{"location":"CONTRIBUTING/#contributing","text":"Found a bug? Have a good idea for improving Thea? Head over to Thea's Github page and create and submit a new issue/enhancement request. Want to contribute your code? Go to the contributing code section and submit a pull-request.","title":"\u2764 Contributing"},{"location":"CONTRIBUTING/#feature-request-or-bug-report","text":"Found a bug or have a enhancement request go to our issue-tracker and report it using the appropriate template.","title":"Feature request or bug report"},{"location":"CONTRIBUTING/#writing-documentation","text":"Want to contribute to our documentation? Your a real hero! \ud83c\udf89 Our documentation is all written in Markdown and build by MkDocs To add pages to our documentation place your new markdown file in \\docs and add the page in the nav section of .mkdocs.yml . Have you added any images, place these in \\docs\\images . To preview the changes navigate to the root of the repository and run: mkdocs serve Warning If the website does not load immediately you should refresh the web-page once the the site has been build end the local server is running.","title":"Writing documentation"},{"location":"CONTRIBUTING/#contributing-code","text":"Want to contribute your coding skills? have a look at our guide on contributing to Theia. If you are not sure what to work on have a look at our issue-tracker and look for an issue/enhancement you like to work on. All-ready have your code written? No need to file an issue first immediately create an pull-request.","title":"Contributing code"},{"location":"CONTRIBUTING/#emoji","text":"As you might have noticed when going over our documentation we like emoji, especially in our commit messages. Inspired by Gitmoji we like all our commit messages to be preceded by an emoji. Using emoji on commit messages provides an easy way of identifying the purpose or intention of a commit with only looking at the emoji used. Refer to the table underneath to see which emoji is appropriate for your commit. Emoji Commit type Code Initial commit :tada: New feature :sparkles: Adding a test :white_check_mark: Writing documentation :memo: Documenting source code :bulb: Bad code :hankey: Experimental stuff :alembic: Work in progress :construction: Updating UI or style files :lipstick: Refactoring code :recycle: Improve format/structure :art: Performance improvement :zap: Removing linter warnings :rotating_light: Bugfix :beetle: Fixed security issue :lock: Fixing on Linux :penguin: Fixing on MacOS :apple: Fixing on Windows :checkered_flag: Moving files/code :truck: Removing code/files :wastebasket: Adding a dependency :heavy_plus_sign: Removing a dependency :heavy_minus_sign: Upgrading dependencies :arrow_up: Downgrading dependencies :arrow_down: Configuration files :wrench: Metadata :card_index: Releasing or version tags :bookmark: Continuous integration stuff :construction_worker: Packaging stuff :package: Deploying stuff :rocket: Merging branches :twisted_rightwards_arrows: Reverting changes :rewind:","title":"Emoji!"},{"location":"LICENSE/","text":"\ud83d\udcc3 License \u00b6 Thea is available under the GNU Lesser General Public License version 3. LGPL version 3 \u00b6 GNU LESSER GENERAL PUBLIC LICENSE \u00b6 Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. This version of the GNU Lesser General Public License incorporates the terms and conditions of version 3 of the GNU General Public License, supplemented by the additional permissions listed below. 0. Additional Definitions \u00b6 As used herein, \"this License\" refers to version 3 of the GNU Lesser General Public License, and the \"GNU GPL\" refers to version 3 of the GNU General Public License. \"The Library\" refers to a covered work governed by this License, other than an Application or a Combined Work as defined below. An \"Application\" is any work that makes use of an interface provided by the Library, but which is not otherwise based on the Library. Defining a subclass of a class defined by the Library is deemed a mode of using an interface provided by the Library. A \"Combined Work\" is a work produced by combining or linking an Application with the Library. The particular version of the Library with which the Combined Work was made is also called the \"Linked Version\". The \"Minimal Corresponding Source\" for a Combined Work means the Corresponding Source for the Combined Work, excluding any source code for portions of the Combined Work that, considered in isolation, are based on the Application, and not on the Linked Version. The \"Corresponding Application Code\" for a Combined Work means the object code and/or source code for the Application, including any data and utility programs needed for reproducing the Combined Work from the Application, but excluding the System Libraries of the Combined Work. 1. Exception to Section 3 of the GNU GPL \u00b6 You may convey a covered work under sections 3 and 4 of this License without being bound by section 3 of the GNU GPL. 2. Conveying Modified Versions \u00b6 If you modify a copy of the Library, and, in your modifications, a facility refers to a function or data to be supplied by an Application that uses the facility (other than as an argument passed when the facility is invoked), then you may convey a copy of the modified version: a) under this License, provided that you make a good faith effort to ensure that, in the event an Application does not supply the function or data, the facility still operates, and performs b) under the GNU GPL, with none of the additional permissions of this License applicable to that copy. 3. Object Code Incorporating Material from Library Header Files \u00b6 The object code form of an Application may incorporate material from a header file that is part of the Library. You may convey such object code under terms of your choice, provided that, if the incorporated material is not limited to numerical parameters, data structure layouts and accessors, or small macros, inline functions and templates (ten or fewer lines in length), you do both of the following: a) Give prominent notice with each copy of the object code that the Library is used in it and that the Library and its use are covered by this License. b) Accompany the object code with a copy of the GNU GPL and this license document. 4. Combined Works \u00b6 You may convey a Combined Work under terms of your choice that, taken together, effectively do not restrict modification of the portions of the Library contained in the Combined Work and reverse engineering for debugging such modifications, if you also do each of the following: a) Give prominent notice with each copy of the Combined Work that the Library is used in it and that the Library and its use are covered by this License. b) Accompany the Combined Work with a copy of the GNU GPL and this license document. c) For a Combined Work that displays copyright notices during execution, include the copyright notice for the Library among these notices, as well as a reference directing the user to the copies of the GNU GPL and this license document. d) Do one of the following: 0) Convey the Minimal Corresponding Source under the terms of this License, and the Corresponding Application Code in a form suitable for, and under terms that permit, the user to recombine or relink the Application with a modified version of the Linked Version to produce a modified Combined Work, in the manner specified by section 6 of the GNU GPL for conveying Corresponding Source. 1) Use a suitable shared library mechanism for linking with the Library. A suitable mechanism is one that (a) uses at run time a copy of the Library already present on the user's computer system, and (b) will operate properly with a modified version of the Library that is interface-compatible with the Linked Version. e) Provide Installation Information, but only if you would otherwise be required to provide such information under section 6 of the GNU GPL, and only to the extent that such information is necessary to install and execute a modified version of the Combined Work produced by recombining or relinking the Application with a modified version of the Linked Version. (If you use option 4d0, the Installation Information must accompany the Minimal Corresponding Source and Corresponding Application Code. If you use option 4d1, you must provide the Installation Information in the manner specified by section 6 of the GNU GPL for conveying Corresponding Source.) 5. Combined Libraries \u00b6 You may place library facilities that are a work based on the Library side by side in a single library together with other library facilities that are not Applications and are not covered by this License, and convey such a combined library under terms of your choice, if you do both of the following: a) Accompany the combined library with a copy of the same work based on the Library, uncombined with any other library facilities, conveyed under the terms of this License. b) Give prominent notice with the combined library that part of it is a work based on the Library, and explaining where to find the accompanying uncombined form of the same work. 6. Revised Versions of the GNU Lesser General Public License \u00b6 The Free Software Foundation may publish revised and/or new versions of the GNU Lesser General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Library as you received it specifies that a certain numbered version of the GNU Lesser General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that published version or of any later version published by the Free Software Foundation. If the Library as you received it does not specify a version number of the GNU Lesser General Public License, you may choose any version of the GNU Lesser General Public License ever published by the Free Software Foundation. If the Library as you received it specifies that a proxy can decide whether future versions of the GNU Lesser General Public License shall apply, that proxy's public statement of acceptance of any version is permanent authorization for you to choose that version for the Library. Reference: GNU Lesser General Public License, version 3","title":"License"},{"location":"LICENSE/#license","text":"Thea is available under the GNU Lesser General Public License version 3.","title":"\ud83d\udcc3 License"},{"location":"LICENSE/#lgpl-version-3","text":"","title":"LGPL version 3"},{"location":"LICENSE/#gnu-lesser-general-public-license","text":"Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. This version of the GNU Lesser General Public License incorporates the terms and conditions of version 3 of the GNU General Public License, supplemented by the additional permissions listed below.","title":"GNU LESSER GENERAL PUBLIC LICENSE"},{"location":"LICENSE/#0-additional-definitions","text":"As used herein, \"this License\" refers to version 3 of the GNU Lesser General Public License, and the \"GNU GPL\" refers to version 3 of the GNU General Public License. \"The Library\" refers to a covered work governed by this License, other than an Application or a Combined Work as defined below. An \"Application\" is any work that makes use of an interface provided by the Library, but which is not otherwise based on the Library. Defining a subclass of a class defined by the Library is deemed a mode of using an interface provided by the Library. A \"Combined Work\" is a work produced by combining or linking an Application with the Library. The particular version of the Library with which the Combined Work was made is also called the \"Linked Version\". The \"Minimal Corresponding Source\" for a Combined Work means the Corresponding Source for the Combined Work, excluding any source code for portions of the Combined Work that, considered in isolation, are based on the Application, and not on the Linked Version. The \"Corresponding Application Code\" for a Combined Work means the object code and/or source code for the Application, including any data and utility programs needed for reproducing the Combined Work from the Application, but excluding the System Libraries of the Combined Work.","title":"0. Additional Definitions"},{"location":"LICENSE/#1-exception-to-section-3-of-the-gnu-gpl","text":"You may convey a covered work under sections 3 and 4 of this License without being bound by section 3 of the GNU GPL.","title":"1. Exception to Section 3 of the GNU GPL"},{"location":"LICENSE/#2-conveying-modified-versions","text":"If you modify a copy of the Library, and, in your modifications, a facility refers to a function or data to be supplied by an Application that uses the facility (other than as an argument passed when the facility is invoked), then you may convey a copy of the modified version: a) under this License, provided that you make a good faith effort to ensure that, in the event an Application does not supply the function or data, the facility still operates, and performs b) under the GNU GPL, with none of the additional permissions of this License applicable to that copy.","title":"2. Conveying Modified Versions"},{"location":"LICENSE/#3-object-code-incorporating-material-from-library-header-files","text":"The object code form of an Application may incorporate material from a header file that is part of the Library. You may convey such object code under terms of your choice, provided that, if the incorporated material is not limited to numerical parameters, data structure layouts and accessors, or small macros, inline functions and templates (ten or fewer lines in length), you do both of the following: a) Give prominent notice with each copy of the object code that the Library is used in it and that the Library and its use are covered by this License. b) Accompany the object code with a copy of the GNU GPL and this license document.","title":"3. Object Code Incorporating Material from Library Header Files"},{"location":"LICENSE/#4-combined-works","text":"You may convey a Combined Work under terms of your choice that, taken together, effectively do not restrict modification of the portions of the Library contained in the Combined Work and reverse engineering for debugging such modifications, if you also do each of the following: a) Give prominent notice with each copy of the Combined Work that the Library is used in it and that the Library and its use are covered by this License. b) Accompany the Combined Work with a copy of the GNU GPL and this license document. c) For a Combined Work that displays copyright notices during execution, include the copyright notice for the Library among these notices, as well as a reference directing the user to the copies of the GNU GPL and this license document. d) Do one of the following: 0) Convey the Minimal Corresponding Source under the terms of this License, and the Corresponding Application Code in a form suitable for, and under terms that permit, the user to recombine or relink the Application with a modified version of the Linked Version to produce a modified Combined Work, in the manner specified by section 6 of the GNU GPL for conveying Corresponding Source. 1) Use a suitable shared library mechanism for linking with the Library. A suitable mechanism is one that (a) uses at run time a copy of the Library already present on the user's computer system, and (b) will operate properly with a modified version of the Library that is interface-compatible with the Linked Version. e) Provide Installation Information, but only if you would otherwise be required to provide such information under section 6 of the GNU GPL, and only to the extent that such information is necessary to install and execute a modified version of the Combined Work produced by recombining or relinking the Application with a modified version of the Linked Version. (If you use option 4d0, the Installation Information must accompany the Minimal Corresponding Source and Corresponding Application Code. If you use option 4d1, you must provide the Installation Information in the manner specified by section 6 of the GNU GPL for conveying Corresponding Source.)","title":"4. Combined Works"},{"location":"LICENSE/#5-combined-libraries","text":"You may place library facilities that are a work based on the Library side by side in a single library together with other library facilities that are not Applications and are not covered by this License, and convey such a combined library under terms of your choice, if you do both of the following: a) Accompany the combined library with a copy of the same work based on the Library, uncombined with any other library facilities, conveyed under the terms of this License. b) Give prominent notice with the combined library that part of it is a work based on the Library, and explaining where to find the accompanying uncombined form of the same work.","title":"5. Combined Libraries"},{"location":"LICENSE/#6-revised-versions-of-the-gnu-lesser-general-public-license","text":"The Free Software Foundation may publish revised and/or new versions of the GNU Lesser General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Library as you received it specifies that a certain numbered version of the GNU Lesser General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that published version or of any later version published by the Free Software Foundation. If the Library as you received it does not specify a version number of the GNU Lesser General Public License, you may choose any version of the GNU Lesser General Public License ever published by the Free Software Foundation. If the Library as you received it specifies that a proxy can decide whether future versions of the GNU Lesser General Public License shall apply, that proxy's public statement of acceptance of any version is permanent authorization for you to choose that version for the Library. Reference: GNU Lesser General Public License, version 3","title":"6. Revised Versions of the GNU Lesser General Public License"},{"location":"PLANNED/","text":"\ud83d\udd1c Planned features \u00b6 Here you can find the currently planned features. Would you like to see a feature to be added head over to our issue tracker and submit an enhancement request. Next release \u00b6 The next release will be focused on getting the basic use case of Thea working. In addition to this the documentation will be updated up to a point where it is possible for new contributers to join. Added \u00b6 A changelog; Communication with MQTT hardware modules; Bug checking using bugbear; Testing for TheaWorld found in thea_world.py ; Dependency checks using safety CI Changed \u00b6 Documentation structure; User guide; Developer guide; Release guide; Contributing instructions; Guide on using poetry; Improved readme; Link to change log; Link to planned features; Updated badges; Fixed \u00b6 Travis-CI not publishing to PyPi; PyPi readme rendering; Third party log messages in Thea logs; PyPi readme rendering; Warnings from the warnings module not in logs; Later \u00b6 Accelerated model time \u23f0 Day and night cycle \ud83c\udf13 Hardware control over MQTT Household lighting \ud83c\udfe1 Weather patterns \u26c5\ufe0f\u2614\u26a1\ufe0f Traffic \ud83d\ude97\ud83d\ude95\ud83d\ude8c Opening-hours \ud83d\udd57 Graphical user interface Moon and stars \ud83c\udf1c\u2728 DCC train control \ud83d\ude82 Weather sounds \ud83d\udd09 Release of *.exe file; Type checking using mypy;","title":"Planned features"},{"location":"PLANNED/#planned-features","text":"Here you can find the currently planned features. Would you like to see a feature to be added head over to our issue tracker and submit an enhancement request.","title":"\ud83d\udd1c Planned features"},{"location":"PLANNED/#next-release","text":"The next release will be focused on getting the basic use case of Thea working. In addition to this the documentation will be updated up to a point where it is possible for new contributers to join.","title":"Next release"},{"location":"PLANNED/#added","text":"A changelog; Communication with MQTT hardware modules; Bug checking using bugbear; Testing for TheaWorld found in thea_world.py ; Dependency checks using safety CI","title":"Added"},{"location":"PLANNED/#changed","text":"Documentation structure; User guide; Developer guide; Release guide; Contributing instructions; Guide on using poetry; Improved readme; Link to change log; Link to planned features; Updated badges;","title":"Changed"},{"location":"PLANNED/#fixed","text":"Travis-CI not publishing to PyPi; PyPi readme rendering; Third party log messages in Thea logs; PyPi readme rendering; Warnings from the warnings module not in logs;","title":"Fixed"},{"location":"PLANNED/#later","text":"Accelerated model time \u23f0 Day and night cycle \ud83c\udf13 Hardware control over MQTT Household lighting \ud83c\udfe1 Weather patterns \u26c5\ufe0f\u2614\u26a1\ufe0f Traffic \ud83d\ude97\ud83d\ude95\ud83d\ude8c Opening-hours \ud83d\udd57 Graphical user interface Moon and stars \ud83c\udf1c\u2728 DCC train control \ud83d\ude82 Weather sounds \ud83d\udd09 Release of *.exe file; Type checking using mypy;","title":"Later"},{"location":"contributing/","text":"\u2764 Contributing \u00b6 Found a bug? Have a good idea for improving Thea? Head over to Thea's Github page and create and submit a new issue/enhancement request. Want to contribute your code? Go to the contributing code section and submit a pull-request. Feature request or bug report \u00b6 Found a bug or have a enhancement request go to our issue-tracker and report it using the appropriate template. Writing documentation \u00b6 Want to contribute to our documentation? Your a real hero! \ud83c\udf89 Our documentation is all written in Markdown and build by MkDocs To add pages to our documentation place your new markdown file in \\docs and add the page in the nav section of .mkdocs.yml . Have you added any images, place these in \\docs\\images . To preview the changes navigate to the root of the repository and run: mkdocs serve Warning If the website does not load immediately you should refresh the web-page once the the site has been build end the local server is running. Contributing code \u00b6 Want to contribute your coding skills? have a look at our guide on contributing to Theia. If you are not sure what to work on have a look at our issue-tracker and look for an issue/enhancement you like to work on. All-ready have your code written? No need to file an issue first immediately create an pull-request. Emoji! \u00b6 As you might have noticed when going over our documentation we like emoji, especially in our commit messages. Inspired by Gitmoji we like all our commit messages to be preceded by an emoji. Using emoji on commit messages provides an easy way of identifying the purpose or intention of a commit with only looking at the emoji used. Refer to the table underneath to see which emoji is appropriate for your commit. Emoji Commit type Code Initial commit :tada: New feature :sparkles: Adding a test :white_check_mark: Writing documentation :memo: Documenting source code :bulb: Bad code :hankey: Experimental stuff :alembic: Work in progress :construction: Updating UI or style files :lipstick: Refactoring code :recycle: Improve format/structure :art: Performance improvement :zap: Removing linter warnings :rotating_light: Bugfix :beetle: Fixed security issue :lock: Fixing on Linux :penguin: Fixing on MacOS :apple: Fixing on Windows :checkered_flag: Moving files/code :truck: Removing code/files :wastebasket: Adding a dependency :heavy_plus_sign: Removing a dependency :heavy_minus_sign: Upgrading dependencies :arrow_up: Downgrading dependencies :arrow_down: Configuration files :wrench: Metadata :card_index: Releasing or version tags :bookmark: Continuous integration stuff :construction_worker: Packaging stuff :package: Deploying stuff :rocket: Merging branches :twisted_rightwards_arrows: Reverting changes :rewind:","title":"\u2764 Contributing"},{"location":"contributing/#contributing","text":"Found a bug? Have a good idea for improving Thea? Head over to Thea's Github page and create and submit a new issue/enhancement request. Want to contribute your code? Go to the contributing code section and submit a pull-request.","title":"\u2764 Contributing"},{"location":"contributing/#feature-request-or-bug-report","text":"Found a bug or have a enhancement request go to our issue-tracker and report it using the appropriate template.","title":"Feature request or bug report"},{"location":"contributing/#writing-documentation","text":"Want to contribute to our documentation? Your a real hero! \ud83c\udf89 Our documentation is all written in Markdown and build by MkDocs To add pages to our documentation place your new markdown file in \\docs and add the page in the nav section of .mkdocs.yml . Have you added any images, place these in \\docs\\images . To preview the changes navigate to the root of the repository and run: mkdocs serve Warning If the website does not load immediately you should refresh the web-page once the the site has been build end the local server is running.","title":"Writing documentation"},{"location":"contributing/#contributing-code","text":"Want to contribute your coding skills? have a look at our guide on contributing to Theia. If you are not sure what to work on have a look at our issue-tracker and look for an issue/enhancement you like to work on. All-ready have your code written? No need to file an issue first immediately create an pull-request.","title":"Contributing code"},{"location":"contributing/#emoji","text":"As you might have noticed when going over our documentation we like emoji, especially in our commit messages. Inspired by Gitmoji we like all our commit messages to be preceded by an emoji. Using emoji on commit messages provides an easy way of identifying the purpose or intention of a commit with only looking at the emoji used. Refer to the table underneath to see which emoji is appropriate for your commit. Emoji Commit type Code Initial commit :tada: New feature :sparkles: Adding a test :white_check_mark: Writing documentation :memo: Documenting source code :bulb: Bad code :hankey: Experimental stuff :alembic: Work in progress :construction: Updating UI or style files :lipstick: Refactoring code :recycle: Improve format/structure :art: Performance improvement :zap: Removing linter warnings :rotating_light: Bugfix :beetle: Fixed security issue :lock: Fixing on Linux :penguin: Fixing on MacOS :apple: Fixing on Windows :checkered_flag: Moving files/code :truck: Removing code/files :wastebasket: Adding a dependency :heavy_plus_sign: Removing a dependency :heavy_minus_sign: Upgrading dependencies :arrow_up: Downgrading dependencies :arrow_down: Configuration files :wrench: Metadata :card_index: Releasing or version tags :bookmark: Continuous integration stuff :construction_worker: Packaging stuff :package: Deploying stuff :rocket: Merging branches :twisted_rightwards_arrows: Reverting changes :rewind:","title":"Emoji!"},{"location":"not_available/","text":"Sorry, this page is not available yet \ud83d\ude4a \u00b6","title":"MQTT-module"},{"location":"not_available/#sorry-this-page-is-not-available-yet","text":"","title":"Sorry, this page is not available yet \ud83d\ude4a"},{"location":"api_refrence/item_stores/","text":"Item stores \u00b6 Item stores are used as 'databases' of items. Each item store inherits its basic functionality from the BaseStore class. The BaseStore class is indented to be inherited and not to be used directly. BaseStore \u00b6 A class to store and create BaseItems . New \u00b6 Delete \u00b6 Edit \u00b6 Get \u00b6 Savable state \u00b6 BaseItem \u00b6 BaseItem defines a object that can be stored in an instance of BaseStore . The BaseItem class is indented to be inherited and not to be used directly.","title":"Item stores"},{"location":"api_refrence/item_stores/#item-stores","text":"Item stores are used as 'databases' of items. Each item store inherits its basic functionality from the BaseStore class. The BaseStore class is indented to be inherited and not to be used directly.","title":"Item stores"},{"location":"api_refrence/item_stores/#basestore","text":"A class to store and create BaseItems .","title":"BaseStore"},{"location":"api_refrence/item_stores/#new","text":"","title":"New"},{"location":"api_refrence/item_stores/#delete","text":"","title":"Delete"},{"location":"api_refrence/item_stores/#edit","text":"","title":"Edit"},{"location":"api_refrence/item_stores/#get","text":"","title":"Get"},{"location":"api_refrence/item_stores/#savable-state","text":"","title":"Savable state"},{"location":"api_refrence/item_stores/#baseitem","text":"BaseItem defines a object that can be stored in an instance of BaseStore . The BaseItem class is indented to be inherited and not to be used directly.","title":"BaseItem"},{"location":"api_refrence/theia_world/","text":"Theia World \u00b6 The TheaWorld class is the entry point to all of Thea its features.","title":"Theia World"},{"location":"api_refrence/theia_world/#theia-world","text":"The TheaWorld class is the entry point to all of Thea its features.","title":"Theia World"},{"location":"dev_guide/contributing_code/","text":"\ud83d\udcbc Working on code \u00b6 If you would like to contribute code to Thea we are happy to welcome you. Underneath you will find a guide with useful information and tutorials for contributing to the project. Installation \u00b6 To start contributing code to Thea you will need git which can be installed from the git website . Also you will need poetry which you can get using: # basic developer installation pip install poetry # include dependencies for building documentation poetry install --extra \"docs\" You will first need to clone the repository using git and place yourself in its directory: git clone git@github.com:mikevansighem/thea.git cd thea Next, you will need to install the (developer) dependencies of thea. poetry install Check that everything is working on your machine before you make changes. pytest -v Pre-commit hooks \u00b6 In order to ease the development of functioning and nicely formatted code we use pre-commit hooks managed by pre-commit . To get setup with our recommended pre-commit hooks navigate to the root of this repository and run: pre-commit install This takes care of the setup of all the pre-commit hooks defined in .pre-commit-config.yaml . Upon your next commit your code will be formatted, and checked for linting errors. To run the pre-commit hooks manually use: pre-commit run --all-files Warning If the commit fails due to one of the formatting tools you can simply retry the commit. Most likely your commit will pass now. If a formatter needs to make a change the pre-commit checks are always considered to be failed even if the formatting has been fixed now. Adding your code \u00b6 Once installation is complete it is off to the races. Do what ever you want to Theia. Coding style \u00b6 The code style we use is \"Black\" , but don't worry about that to much as long as you have the provided pre-commit hooks installed there is nothing for you to do. Black takes over the minutiae of hand-formatting. One thing Black cannot solve is your variable naming. Please keep these according to PEP-8 . Dependency management \u00b6 For packaging of Thea we rely on poetry . Resulting in slightly different dependency management than traditional Python packages. We do not use a requirements.txt file but instead use pyproject.toml . To learn more about this file format head over to the documentation of poetry . However most that isn't really important as long as you remember the following commands. # adding a dependency poetry add dependancy_name # adding a developer dependency poetry add dependancy_name --dev # removing a dependency poetry remove dependancy_name # updating current installation poetry update Committing \u00b6 Each time you make a notable change to your code you are wise to commit it to your branch of Thea. git commit -m \":emoji: Meaningfull message\" Preferably you did this using a meaningful commit message including an appropriate emoji. To learn more about why we like emoji in our commit messages head over here Testing \u00b6 Hopefully your newly committed feature has tests. If not we won't be that harsh on you currently we are more interested in evolving Thea rapidly rather then stability. To learn more about how we test Thei and where to store your tests head over to the testing section. Pull-request process \u00b6 If you like to see your code to be added to Thei you need to create a pull request. This can be done from Github . Once you create a pull-request your code code will be checked by our CI system. To find out which checks are being run head over to the testing page. If all the checks pass one of the core-contributers will accept you pull-request and merge it with the master branch to be deployed in the next release.","title":"Working on code"},{"location":"dev_guide/contributing_code/#working-on-code","text":"If you would like to contribute code to Thea we are happy to welcome you. Underneath you will find a guide with useful information and tutorials for contributing to the project.","title":"\ud83d\udcbc Working on code"},{"location":"dev_guide/contributing_code/#installation","text":"To start contributing code to Thea you will need git which can be installed from the git website . Also you will need poetry which you can get using: # basic developer installation pip install poetry # include dependencies for building documentation poetry install --extra \"docs\" You will first need to clone the repository using git and place yourself in its directory: git clone git@github.com:mikevansighem/thea.git cd thea Next, you will need to install the (developer) dependencies of thea. poetry install Check that everything is working on your machine before you make changes. pytest -v","title":"Installation"},{"location":"dev_guide/contributing_code/#pre-commit-hooks","text":"In order to ease the development of functioning and nicely formatted code we use pre-commit hooks managed by pre-commit . To get setup with our recommended pre-commit hooks navigate to the root of this repository and run: pre-commit install This takes care of the setup of all the pre-commit hooks defined in .pre-commit-config.yaml . Upon your next commit your code will be formatted, and checked for linting errors. To run the pre-commit hooks manually use: pre-commit run --all-files Warning If the commit fails due to one of the formatting tools you can simply retry the commit. Most likely your commit will pass now. If a formatter needs to make a change the pre-commit checks are always considered to be failed even if the formatting has been fixed now.","title":"Pre-commit hooks"},{"location":"dev_guide/contributing_code/#adding-your-code","text":"Once installation is complete it is off to the races. Do what ever you want to Theia.","title":"Adding your code"},{"location":"dev_guide/contributing_code/#coding-style","text":"The code style we use is \"Black\" , but don't worry about that to much as long as you have the provided pre-commit hooks installed there is nothing for you to do. Black takes over the minutiae of hand-formatting. One thing Black cannot solve is your variable naming. Please keep these according to PEP-8 .","title":"Coding style"},{"location":"dev_guide/contributing_code/#dependency-management","text":"For packaging of Thea we rely on poetry . Resulting in slightly different dependency management than traditional Python packages. We do not use a requirements.txt file but instead use pyproject.toml . To learn more about this file format head over to the documentation of poetry . However most that isn't really important as long as you remember the following commands. # adding a dependency poetry add dependancy_name # adding a developer dependency poetry add dependancy_name --dev # removing a dependency poetry remove dependancy_name # updating current installation poetry update","title":"Dependency management"},{"location":"dev_guide/contributing_code/#committing","text":"Each time you make a notable change to your code you are wise to commit it to your branch of Thea. git commit -m \":emoji: Meaningfull message\" Preferably you did this using a meaningful commit message including an appropriate emoji. To learn more about why we like emoji in our commit messages head over here","title":"Committing"},{"location":"dev_guide/contributing_code/#testing","text":"Hopefully your newly committed feature has tests. If not we won't be that harsh on you currently we are more interested in evolving Thea rapidly rather then stability. To learn more about how we test Thei and where to store your tests head over to the testing section.","title":"Testing"},{"location":"dev_guide/contributing_code/#pull-request-process","text":"If you like to see your code to be added to Thei you need to create a pull request. This can be done from Github . Once you create a pull-request your code code will be checked by our CI system. To find out which checks are being run head over to the testing page. If all the checks pass one of the core-contributers will accept you pull-request and merge it with the master branch to be deployed in the next release.","title":"Pull-request process"},{"location":"dev_guide/releasing/","text":"\ud83d\ude80 Releasing \u00b6 To release a new version of Thea a couple of steps need to be taken here we will walk you trough all of them. First ensure all the the planned features for the next release are committed to the master branch. If so everything is set to start the release process. Clone the repository \u00b6 Clone the repository using git for local editing of files. git clone git@github.com:mikevansighem/thea.git cd thea Change to the branch for release creation. git checkout -b release_v1.0.8 # replace `1.0.8` with the new version number Bump the version \u00b6 Within pyproject.toml the version number needs to be bumped up according to Semantic versioning . Updating the changelog \u00b6 Update the changelog to include all notable changes. The format of our changelog is based on Keep a changelog . Most importantly this means we sort the changes in categories: Added: new features; Changed: changes in existing functionality; Deprecated: soon-to-be removed features; Removed: now removed features; Fixed: bug fixes (if available include a link to the issue); Security: fixing of vulnerabilities (if available include a link to the issue). Within categories we sort based on importance to an end users. For the rest Of the formatting just copy it from a previous release \ud83d\ude09. When in doubt whether to include a change in the log just remember: \"Changelogs are for humans, not machines.\" Commit and pull-request \u00b6 Commit the changes to the release branch and push to origin. git commit -m \":rocket: Getting ready for release v1.2.8\" # replace `1.0.8` with the new version number git push Head over to Github and create a pull request to merge the changes into the master branch. Wait for the checks to pass and merge. Adding a tag \u00b6 Go to the releases page on Github and draft a new release where: The tag is set to the version preceded by a v for example v1.2.8 ; The target branch is set to master ; The title is set to the version preceded by a v for example v1.2.8 ; The description copied from the changelog minus the top header. Press \"Publish Release\" and our the CI should takes care of releasing the binaries on PyPi and updating our documentation .","title":"Releasing"},{"location":"dev_guide/releasing/#releasing","text":"To release a new version of Thea a couple of steps need to be taken here we will walk you trough all of them. First ensure all the the planned features for the next release are committed to the master branch. If so everything is set to start the release process.","title":"\ud83d\ude80 Releasing"},{"location":"dev_guide/releasing/#clone-the-repository","text":"Clone the repository using git for local editing of files. git clone git@github.com:mikevansighem/thea.git cd thea Change to the branch for release creation. git checkout -b release_v1.0.8 # replace `1.0.8` with the new version number","title":"Clone the repository"},{"location":"dev_guide/releasing/#bump-the-version","text":"Within pyproject.toml the version number needs to be bumped up according to Semantic versioning .","title":"Bump the version"},{"location":"dev_guide/releasing/#updating-the-changelog","text":"Update the changelog to include all notable changes. The format of our changelog is based on Keep a changelog . Most importantly this means we sort the changes in categories: Added: new features; Changed: changes in existing functionality; Deprecated: soon-to-be removed features; Removed: now removed features; Fixed: bug fixes (if available include a link to the issue); Security: fixing of vulnerabilities (if available include a link to the issue). Within categories we sort based on importance to an end users. For the rest Of the formatting just copy it from a previous release \ud83d\ude09. When in doubt whether to include a change in the log just remember: \"Changelogs are for humans, not machines.\"","title":"Updating the changelog"},{"location":"dev_guide/releasing/#commit-and-pull-request","text":"Commit the changes to the release branch and push to origin. git commit -m \":rocket: Getting ready for release v1.2.8\" # replace `1.0.8` with the new version number git push Head over to Github and create a pull request to merge the changes into the master branch. Wait for the checks to pass and merge.","title":"Commit and pull-request"},{"location":"dev_guide/releasing/#adding-a-tag","text":"Go to the releases page on Github and draft a new release where: The tag is set to the version preceded by a v for example v1.2.8 ; The target branch is set to master ; The title is set to the version preceded by a v for example v1.2.8 ; The description copied from the changelog minus the top header. Press \"Publish Release\" and our the CI should takes care of releasing the binaries on PyPi and updating our documentation .","title":"Adding a tag"},{"location":"dev_guide/testing_and_ci/","text":"\ud83d\udea8 Testing and CI \u00b6 To help us find errors we have a number of tests and checks. Which we can run locally but will also run on our continuous integration (CI) system. For any of the commands in this section to work we assume you have installed Thea according to the developer installation instructions. Code testing \u00b6 All our code tests are located in /tests and implemented using pytest . To run on your main python installation use: pytest If you would like coverage information as well use: py.test --cov Formating checks \u00b6 In addition to tests for functionality of the code we have checks for the formatting of the code. For this we use Flake8 extended with flake8-docstrings and pep8-naming . To run the formatting checks use: flake8 Tox \u00b6 To test against multiple python versions and manage all test environments we use tox . To install: pip install tox To run the entire test suite including formatting and typing checks use: tox Continuous integration \u00b6 To ease the load on our developers we have set up an extensive continuous integration (CI) system. It takes care of building, testing and deployment of code and the documentation. To enable multi-platform testing we had to use both Travis-CI and AppVeyor To see which service is used to perform what tasks refer to the table below. Travis-CI AppVeyor Testing on Windows Testing on Linux Testing on OSX Minimum coverage Formatting (flake8) Formatting (black) Typing (mypy) Building documentation Deploying documentation Deploying on PyPi Building executable Deploying executable Note Type checking using mypy and building an executable are not functional yet. To help improve the quality of our code further it is analyzed by Codacy which displays linting, security, formatting and coverage results in a easy to use interface.","title":"Testing and CI"},{"location":"dev_guide/testing_and_ci/#testing-and-ci","text":"To help us find errors we have a number of tests and checks. Which we can run locally but will also run on our continuous integration (CI) system. For any of the commands in this section to work we assume you have installed Thea according to the developer installation instructions.","title":"\ud83d\udea8 Testing and CI"},{"location":"dev_guide/testing_and_ci/#code-testing","text":"All our code tests are located in /tests and implemented using pytest . To run on your main python installation use: pytest If you would like coverage information as well use: py.test --cov","title":"Code testing"},{"location":"dev_guide/testing_and_ci/#formating-checks","text":"In addition to tests for functionality of the code we have checks for the formatting of the code. For this we use Flake8 extended with flake8-docstrings and pep8-naming . To run the formatting checks use: flake8","title":"Formating checks"},{"location":"dev_guide/testing_and_ci/#tox","text":"To test against multiple python versions and manage all test environments we use tox . To install: pip install tox To run the entire test suite including formatting and typing checks use: tox","title":"Tox"},{"location":"dev_guide/testing_and_ci/#continuous-integration","text":"To ease the load on our developers we have set up an extensive continuous integration (CI) system. It takes care of building, testing and deployment of code and the documentation. To enable multi-platform testing we had to use both Travis-CI and AppVeyor To see which service is used to perform what tasks refer to the table below. Travis-CI AppVeyor Testing on Windows Testing on Linux Testing on OSX Minimum coverage Formatting (flake8) Formatting (black) Typing (mypy) Building documentation Deploying documentation Deploying on PyPi Building executable Deploying executable Note Type checking using mypy and building an executable are not functional yet. To help improve the quality of our code further it is analyzed by Codacy which displays linting, security, formatting and coverage results in a easy to use interface.","title":"Continuous integration"},{"location":"welcome/getting_started/","text":"\ud83e\udd14 Getting started \u00b6 For an end user it might be a bit early to get started however if you really want to give Thea a try already follow the instructions below. Note In case you would like to contribute head over to the contributing section of our documentation. And follow the developer installation instructions. Installation prerequisites \u00b6 To run Thea you will need Python 3.6 or higher installed on your machine. To get it we recommend you follow this guide from Real Python . However the quick version is that you should go to the Python website , download the latests version and keep clicking next in the installer. Supported platforms \u00b6 Thea aims to make the program available on most platforms, check the table below if your version is supported. If you would like us to support more versions/platforms submit an enhancement request on Github . Python 3.6 Python 3.7 Python 3.8 Windows x86 Windows x64 Linux OSX Note We are testing against the development branch of Python 3.8. Currently tests on OSX are passing but we do not guaranty it will work for you as well. Installing Thea \u00b6 To install Thea we will use the command line. On Windows open the start menu, search for cmd and hit the enter key. In the command line window type: pip install thea Hit the enter key and Thea together with other dependencies will be downloaded and installed. Launching Thea \u00b6 To launch Thea navigate to the root of the repository and run: python -m thea If everything went well you should be ready to start controlling your using Thea model-layout.","title":"Getting started"},{"location":"welcome/getting_started/#getting-started","text":"For an end user it might be a bit early to get started however if you really want to give Thea a try already follow the instructions below. Note In case you would like to contribute head over to the contributing section of our documentation. And follow the developer installation instructions.","title":"\ud83e\udd14 Getting started"},{"location":"welcome/getting_started/#installation-prerequisites","text":"To run Thea you will need Python 3.6 or higher installed on your machine. To get it we recommend you follow this guide from Real Python . However the quick version is that you should go to the Python website , download the latests version and keep clicking next in the installer.","title":"Installation prerequisites"},{"location":"welcome/getting_started/#supported-platforms","text":"Thea aims to make the program available on most platforms, check the table below if your version is supported. If you would like us to support more versions/platforms submit an enhancement request on Github . Python 3.6 Python 3.7 Python 3.8 Windows x86 Windows x64 Linux OSX Note We are testing against the development branch of Python 3.8. Currently tests on OSX are passing but we do not guaranty it will work for you as well.","title":"Supported platforms"},{"location":"welcome/getting_started/#installing-thea","text":"To install Thea we will use the command line. On Windows open the start menu, search for cmd and hit the enter key. In the command line window type: pip install thea Hit the enter key and Thea together with other dependencies will be downloaded and installed.","title":"Installing Thea"},{"location":"welcome/getting_started/#launching-thea","text":"To launch Thea navigate to the root of the repository and run: python -m thea If everything went well you should be ready to start controlling your using Thea model-layout.","title":"Launching Thea"},{"location":"welcome/haveing_issues/","text":"\ud83d\udc7b Having issues?! \u00b6 We're sorry you experiencing problems with Thei. Have a look weather it has already been answered in our FAQ underneath. Otherwise submit an issue in issue tracker and we hope to resolve your problem shortly. FAQ \u00b6 We haven't received any questions yet \ud83d\ude49.","title":"Haveing issues?!"},{"location":"welcome/haveing_issues/#having-issues","text":"We're sorry you experiencing problems with Thei. Have a look weather it has already been answered in our FAQ underneath. Otherwise submit an issue in issue tracker and we hope to resolve your problem shortly.","title":"\ud83d\udc7b Having issues?!"},{"location":"welcome/haveing_issues/#faq","text":"We haven't received any questions yet \ud83d\ude49.","title":"FAQ"},{"location":"welcome/how_it_works/","text":"\ud83d\udc53 How Thea works \u00b6 Definitions \u00b6 Throughout the documentation for Thea we use a variety of terms the most import of which are defined below: Thea world: An object in which all other objects are stored. A world can be saved to a file. Environment: simulated state by which things are surrounded. Thing: object in the \"World\" that can be controlled such as a house or a streetlight. Communicator: object to communicate with hardware modules. MQTT hardware module: physical device with pins connected to MQTT network. Topic: (sub-)address on the MQTT communication channel. Functional endpoint: Object to control the behavior of one of multiple endpoints. Endpoint: object to control the behavior of one or multiple pins. Pin: physical output of a controller board such as the Raspberry Pi.","title":"How it works"},{"location":"welcome/how_it_works/#how-thea-works","text":"","title":"\ud83d\udc53 How Thea works"},{"location":"welcome/how_it_works/#definitions","text":"Throughout the documentation for Thea we use a variety of terms the most import of which are defined below: Thea world: An object in which all other objects are stored. A world can be saved to a file. Environment: simulated state by which things are surrounded. Thing: object in the \"World\" that can be controlled such as a house or a streetlight. Communicator: object to communicate with hardware modules. MQTT hardware module: physical device with pins connected to MQTT network. Topic: (sub-)address on the MQTT communication channel. Functional endpoint: Object to control the behavior of one of multiple endpoints. Endpoint: object to control the behavior of one or multiple pins. Pin: physical output of a controller board such as the Raspberry Pi.","title":"Definitions"}]}